---
# find if the image exists
# - name: Does ami exist?
#   command: bash -c "aws ec2 describe-images --filters Name=name,Values={{ image_name }} --query 'Images[].{image_id:ImageId}[0]'"
#   register: image_found
#   ignore_errors: true
#   tags:
#     - find_image
#
- name: Find if image {{ image_name }} exist
  ec2_ami_find:
    name: "{{ image_name }}"
    region: "{{ region }}"
    sort: name
    sort_order: descending
    sort_end: 1
  register: ami_find
  tags:
    - find-ami

# Find the if bucket exist
- name: Find if the bucket {{ bucket_name}} exist
  s3: bucket={{bucket_name}} mode=list
  ignore_errors: true
  register: bucket
  tags:
    - find-bucket

# Launch an instance from the specified image
- name: Launch an ec2 instance if the image doesnot exists
  when: ami_find|failed
  ec2:
    key_name: "{{ key_pair }}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    region: "{{ region }}"
    wait: yes
    count: 1
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 10
    instance_tags:
      db: postgres
  register: ec2
  tags:
    - launch-instance

# create image from the launched instance
- name: Create Image from the launched Instance
  when: ami_find|failed
  ec2_ami:
    instance_id: "{{ ec2.instance_ids[0] }}"
    wait: yes
    region: "{{ region }}"
    name: "{{ image_name }}"
    tags:
      service: database
  register: image
  tags:
    - create-image

# Terminate the instance created when no image already exist
- name: Terminate instances that were previously launched
  when: ami_find|failed
  ec2:
    state: absent
    region: "{{region}}"
    instance_ids: "{{ ec2.instance_ids }}"
  tags:
    - terminate-instance

# Compile the Jinja2 template to json format for cloudformation
- name: Compile template to json.
  local_action: template src={{ cloudformation_template }}.j2 dest={{ cloudformation_template }}

# Launch the cloudFormation
- name: Launch CloudFormation
  cloudformation:
    stack_name: "{{stack_name}}"
    state: present
    region: "{{region}}"
    disable_rollback: true
    template:  "{{ cloudformation_template }}"
    tags:
      Stack: "{{stack_name}}"
  tags:
    - cloudformation
  register: vpc

# upload static site to s3 bucket
- name: Upload static html page to the {{ bucket_name}} bucket
  s3:
    bucket: "{{ bucket_name }}"
    object: index.html
    src: /s3/index.html
    encrypt: true
    permission: public-read
    mode: put
  tags:
    - site-upload

